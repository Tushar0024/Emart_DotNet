// <auto-generated />
using System;
using Emart_final.Models.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Emart_final.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Emart_final.Models.Cart", b =>
                {
                    b.Property<int>("CartID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cart_id");

                    b.Property<int>("CustID")
                        .HasColumnType("int")
                        .HasColumnName("custid");

                    b.Property<int>("ProdID")
                        .HasColumnType("int")
                        .HasColumnName("prodid");

                    b.Property<int>("Qty")
                        .HasColumnType("int")
                        .HasColumnName("qty");

                    b.HasKey("CartID");

                    b.HasIndex("CustID");

                    b.HasIndex("ProdID");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("Emart_final.Models.Category", b =>
                {
                    b.Property<int>("catmasterID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("catmaster_id");

                    b.Property<string>("catImgPath")
                        .HasColumnType("longtext")
                        .HasColumnName("cat_img_path");

                    b.Property<string>("categoryName")
                        .HasColumnType("longtext")
                        .HasColumnName("category_name");

                    b.Property<bool>("childflag")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("childflag");

                    b.Property<int>("parentCatID")
                        .HasColumnType("int")
                        .HasColumnName("parent_catid");

                    b.HasKey("catmasterID");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Emart_final.Models.Config", b =>
                {
                    b.Property<int>("ConfigID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("config_id");

                    b.Property<string>("ConfigName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("config_name");

                    b.HasKey("ConfigID");

                    b.ToTable("Config");
                });

            modelBuilder.Entity("Emart_final.Models.ConfigDetails", b =>
                {
                    b.Property<int>("Config_DetailsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("config_detailsid");

                    b.Property<int>("ConfigID")
                        .HasColumnType("int")
                        .HasColumnName("configid");

                    b.Property<string>("Config_details")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("config_details");

                    b.Property<int>("ProdID")
                        .HasColumnType("int")
                        .HasColumnName("prodid");

                    b.HasKey("Config_DetailsID");

                    b.HasIndex("ConfigID");

                    b.HasIndex("ProdID");

                    b.ToTable("Config_Details");
                });

            modelBuilder.Entity("Emart_final.Models.Customer", b =>
                {
                    b.Property<int>("custId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cust_id");

                    b.Property<bool>("cardHolder")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("card_holder");

                    b.Property<string>("custAddress")
                        .HasColumnType("longtext")
                        .HasColumnName("cust_address");

                    b.Property<string>("custEmail")
                        .HasColumnType("longtext")
                        .HasColumnName("cust_email");

                    b.Property<string>("custName")
                        .HasColumnType("longtext")
                        .HasColumnName("cust_name");

                    b.Property<string>("custPassword")
                        .HasColumnType("longtext")
                        .HasColumnName("cust_password");

                    b.Property<string>("custPhone")
                        .HasColumnType("longtext")
                        .HasColumnName("cust_phone");

                    b.Property<int>("points")
                        .HasColumnType("int")
                        .HasColumnName("points");

                    b.HasKey("custId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("Emart_final.Models.Invoice", b =>
                {
                    b.Property<int>("invoiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("invoice_id");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("invoice_date");

                    b.Property<double>("TotalBill")
                        .HasColumnType("double")
                        .HasColumnName("total_bill");

                    b.Property<int>("custID")
                        .HasColumnType("int")
                        .HasColumnName("custid");

                    b.Property<double>("deliveryCharge")
                        .HasColumnType("double")
                        .HasColumnName("delivery_charges");

                    b.Property<double>("tax")
                        .HasColumnType("double")
                        .HasColumnName("tax");

                    b.Property<double>("totalAmt")
                        .HasColumnType("double")
                        .HasColumnName("total_amt");

                    b.HasKey("invoiceID");

                    b.HasIndex("custID");

                    b.ToTable("Invoice");
                });

            modelBuilder.Entity("Emart_final.Models.InvoiceDetails", b =>
                {
                    b.Property<int>("InvoiceDtID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("invoice_dt_id");

                    b.Property<double>("CardHolderPrice")
                        .HasColumnType("double")
                        .HasColumnName("card_holder_price");

                    b.Property<int>("PointsRedeem")
                        .HasColumnType("int")
                        .HasColumnName("points_redeem");

                    b.Property<int>("ProdID")
                        .HasColumnType("int")
                        .HasColumnName("prodid");

                    b.Property<string>("ProdName")
                        .HasColumnType("longtext")
                        .HasColumnName("prod_name");

                    b.Property<int>("invoiceID")
                        .HasColumnType("int")
                        .HasColumnName("invoiceid");

                    b.Property<double>("mrp")
                        .HasColumnType("double")
                        .HasColumnName("mrp");

                    b.HasKey("InvoiceDtID");

                    b.HasIndex("ProdID");

                    b.HasIndex("invoiceID");

                    b.ToTable("Invoice_Details");
                });

            modelBuilder.Entity("Emart_final.Models.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<int>("CustID")
                        .HasColumnType("int")
                        .HasColumnName("cust_id");

                    b.Property<DateTime?>("Deliverydate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deliverydate");

                    b.Property<int>("InvoiceID")
                        .HasColumnType("int")
                        .HasColumnName("invoiceid");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("order_date");

                    b.Property<string>("ShippingAdd")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("shipping_add");

                    b.HasKey("OrderID");

                    b.HasIndex("CustID");

                    b.HasIndex("InvoiceID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Emart_final.Models.Product", b =>
                {
                    b.Property<int>("prodID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("prod_id");

                    b.Property<double>("cardHolderPrice")
                        .HasColumnType("double")
                        .HasColumnName("card_holder_price");

                    b.Property<int>("catmasterID")
                        .HasColumnType("int")
                        .HasColumnName("catmasterid");

                    b.Property<string>("imgPath")
                        .HasColumnType("longtext")
                        .HasColumnName("imgpath");

                    b.Property<int>("inventoryQuantity")
                        .HasColumnType("int")
                        .HasColumnName("inventory_quantity");

                    b.Property<double>("mrpPrice")
                        .HasColumnType("double")
                        .HasColumnName("mrp_price");

                    b.Property<double>("offerPrice")
                        .HasColumnType("double")
                        .HasColumnName("offer_price");

                    b.Property<int>("pointsRedeem")
                        .HasColumnType("int")
                        .HasColumnName("points_redeem");

                    b.Property<string>("prodLongDesc")
                        .HasColumnType("longtext")
                        .HasColumnName("prod_long_desc");

                    b.Property<string>("prodName")
                        .HasColumnType("longtext")
                        .HasColumnName("prod_name");

                    b.Property<string>("prodShortDesc")
                        .HasColumnType("longtext")
                        .HasColumnName("prod_short_desc");

                    b.HasKey("prodID");

                    b.HasIndex("catmasterID");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Emart_final.Models.Cart", b =>
                {
                    b.HasOne("Emart_final.Models.Customer", "Customer")
                        .WithMany("cartList")
                        .HasForeignKey("CustID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Emart_final.Models.Product", "Product")
                        .WithMany("CartList")
                        .HasForeignKey("ProdID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Emart_final.Models.ConfigDetails", b =>
                {
                    b.HasOne("Emart_final.Models.Config", "Config")
                        .WithMany("config_details")
                        .HasForeignKey("ConfigID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Emart_final.Models.Product", "Product")
                        .WithMany("configDetailsList")
                        .HasForeignKey("ProdID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Config");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Emart_final.Models.Invoice", b =>
                {
                    b.HasOne("Emart_final.Models.Customer", "Customer")
                        .WithMany("invoiceList")
                        .HasForeignKey("custID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Emart_final.Models.InvoiceDetails", b =>
                {
                    b.HasOne("Emart_final.Models.Product", "Product")
                        .WithMany("invoiceDetailsList")
                        .HasForeignKey("ProdID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Emart_final.Models.Invoice", "Invoice")
                        .WithMany("InvoiceDtList")
                        .HasForeignKey("invoiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Emart_final.Models.Order", b =>
                {
                    b.HasOne("Emart_final.Models.Customer", "Customer")
                        .WithMany("orderList")
                        .HasForeignKey("CustID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Emart_final.Models.Invoice", "Invoice")
                        .WithMany("Olist")
                        .HasForeignKey("InvoiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("Emart_final.Models.Product", b =>
                {
                    b.HasOne("Emart_final.Models.Category", "Category")
                        .WithMany("Product")
                        .HasForeignKey("catmasterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Emart_final.Models.Category", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("Emart_final.Models.Config", b =>
                {
                    b.Navigation("config_details");
                });

            modelBuilder.Entity("Emart_final.Models.Customer", b =>
                {
                    b.Navigation("cartList");

                    b.Navigation("invoiceList");

                    b.Navigation("orderList");
                });

            modelBuilder.Entity("Emart_final.Models.Invoice", b =>
                {
                    b.Navigation("InvoiceDtList");

                    b.Navigation("Olist");
                });

            modelBuilder.Entity("Emart_final.Models.Product", b =>
                {
                    b.Navigation("CartList");

                    b.Navigation("configDetailsList");

                    b.Navigation("invoiceDetailsList");
                });
#pragma warning restore 612, 618
        }
    }
}
